/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "org.sonarqube" version "3.1.1"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0-M1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0-M1'

    // Mockito
    testImplementation 'org.mockito:mockito-core:3.7.7'

    // Guava
    implementation 'com.google.guava:guava:29.0-jre'

    // Javalin
    implementation 'io.javalin:javalin:3.12.0'

    //jte
    implementation 'gg.jte:jte:1.5.0'

    // Java Logger
    implementation 'org.slf4j:slf4j-simple:1.7.30'

    // Unirest
    implementation 'com.konghq:unirest-java:3.4.00'

    // Selenium
    implementation 'org.seleniumhq.selenium:selenium-chrome-driver:3.141.59'

    //WebDriverManager
    implementation 'io.github.bonigarcia:webdrivermanager:3.6.2'

}

application {
    // Define the main class for the application.
    mainClass = 'my_cargonaut.App'
}

task stage(dependsOn: ['build', 'clean']) {
    build.mustRunAfter clean
}

task copyToLib(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    into "$buildDir/libs"
    from(configurations.compile)
}

stage.dependsOn(copyToLib)

sonarqube {
  properties {
    property "sonar.projectKey", "LucasF-42_my-cargonaut-v2"
  }
}

jar {
    manifest {
        attributes 'Main-Class': 'my_cargonaut.App'
    }
    archiveBaseName = 'MyCargonaut'
    from {
        configurations.compile.collect {it.isDirectory() ? it: zipTree(it)}
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed", "passed"
        exceptionFormat "short"
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(15))
    }
}